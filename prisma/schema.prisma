generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Enums
enum TipoVerba {
    alimentar
    indenizatória
    auxílio_acidente
    outros
}

enum HonorariosDestacados {
    Sim
    Não
}

enum TeseAplicada {
    juros_de_mora
    idoso // 65+
    doenca_grave
    hipossuficiencia
    outros
}

enum StatusRestituicao {
    em_analise
    elegivel
    protocolado
    indeferido
    pago
}

enum PlataformaDistribuicao {
    Legal_One
    Projudi
    PJe
    Outro
}

// Models

model Usuario {
    id               String       @id @default(uuid())
    nome             String
    login            String       @unique
    email            String       @unique
    senha            String
    cpf              String       @unique
    data_nascimento  DateTime
    escritorio       Escritorio?  @relation(fields: [escritorio_id], references: [id])
    escritorio_id    String?
    tipo_perfil      Perfil       @relation(fields: [tipo_perfil_id], references: [id])
    tipo_perfil_id   Int
    createdAt        DateTime     @default(now())
    updatedAt        DateTime     @default(now())
    email_verificado Boolean      @default(false)
    email_token      String?
    status           Int // 1: Ativo, 0: Inativo, 2: Aguardando
    precatorio       Precatorio[]
    Conversa         Conversa[]

    @@map("usuarios")
}

model Escritorio {
    id                  String   @id @default(uuid())
    nome_fantasia       String
    telefone            String
    email               String
    cnpj                String
    api_key             String
    responsaveis_legais String
    dominio_white_label String
    logo                String
    createdAt           DateTime @default(now())
    updatedAt           DateTime @default(now())

    usuarios   Usuario[]
    precatorio Precatorio[]
    Pendencia  Pendencia[]

    @@map("escritorios")
}

model Cliente {
    id              String   @id @default(uuid())
    cpf             String   @unique
    nome            String
    data_nascimento DateTime
    doenca_grave    Boolean
    laudo_doenca    String
    hipossuficiente Boolean
    createdAt       DateTime @default(now())
    updatedAt       DateTime @default(now())
    doenca          String   @default("")

    precatorios Precatorio[]
    documentos  Documento[]

    @@map("clientes")
}

model Precatorio {
    id         String @id @default(uuid())
    cliente_id String

    cliente               Cliente              @relation(fields: [cliente_id], references: [id])
    data_levantamento     DateTime
    valor_bruto           Decimal
    valor_irrf_retido     Decimal
    valor_restituicao     Decimal
    rra_meses             Int
    tribunal_pagador      String
    tipo_verba            TipoVerba
    honorarios_destacados HonorariosDestacados
    percentual_honorario  Decimal
    valor_honorario       Decimal
    processo_origem       String
    oficio_pdf            String
    comprovante_pdf       String
    usuario_id            String?
    escritorio_id         String?
    tese_aplicada         TeseAplicada
    usuario               Usuario?             @relation(fields: [usuario_id], references: [id])
    escritorio            Escritorio?          @relation(fields: [escritorio_id], references: [id])
    status                Int
    contador              Int                  @default(autoincrement())
    createdAt             DateTime             @default(now())
    updatedAt             DateTime             @default(now())

    valor_simulador_RRA        Decimal?
    valor_ir_devido            Decimal?
    diferenca_IR               Decimal?
    valor_corrigido_SELIC      Decimal?
    necessita_calculo_judicial Boolean?
    data_calculo               DateTime?

    numero_processo         String?
    vara_juizo              String?
    data_protocolo          DateTime?
    plataforma_distribuicao PlataformaDistribuicao?

    Pendencia Pendencia[]
    Conversa  Conversa[]

    @@map("precatorios")
}

model Documento {
    id         String   @id @default(uuid())
    cliente_id String
    cliente    Cliente  @relation(fields: [cliente_id], references: [id])
    arquivo    String
    tipo       String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @default(now())

    @@map("documentos")
}

model Log {
    id        String   @id @default(uuid())
    descricao String
    createdAt DateTime @default(now())

    @@map("logs")
}

model Perfil {
    id        Int    @id @default(autoincrement())
    descricao String

    usuarios Usuario[]

    @@map("perfis")
}

model Pendencia {
    id            String      @id @default(uuid())
    precatorio_id String
    precatorio    Precatorio  @relation(fields: [precatorio_id], references: [id])
    categoria     String
    status        Int
    responsaveis  String
    data_final    DateTime
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @default(now())
    escritorio_id String?
    escritorio    Escritorio? @relation(fields: [escritorio_id], references: [id])
    conteudo      Json
    precatorioaId String?

    @@map("pendencias")
}

model Conversa {
    id            String     @id @default(uuid())
    texto         String
    usuario_id    String
    usuario_nome  String
    usuario       Usuario    @relation(fields: [usuario_id], references: [id])
    precatorio_id String
    precatorio    Precatorio @relation(fields: [precatorio_id], references: [id])
    precatorioaId String?

    @@map("conversas")
}

model Notificacao {
    id            String @id @default(uuid())
    precatorio_id String
    card_id       String
    mensagem      String
}
